import torch
from torchvision import transforms
from torch.autograd import Variable
import numpy as np

def generate_terrain():
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

    model = torch.load('./models/terrainModel.pth')
    model = model.to(device)
    model.eval()

    size = 256  # The final terrain size
    patch_size = 64  # The size of the terrain patches generated by the GAN
    overlap = 16  # The amount of overlap between patches

    # Initialize an empty terrain and a count matrix for averaging
    terrain = np.zeros((size, size))
    count = np.zeros((size, size))

    for i in range(0, size-patch_size, patch_size-overlap):
        for j in range(0, size-patch_size, patch_size-overlap):
            z = Variable(torch.randn(1, 100, 1, 1).to(device))  # A random noise vector
            output = model(z)

            # Transpose the tensor to match the format required by Three.js
            output = output.permute(1, 2, 0).detach().cpu().numpy()

            # The output is normalized between -1 and 1, scale it to match the height range of your terrain
            output = (output * 0.5 + 0.5) * 10 

            terrain[i:i+patch_size, j:j+patch_size] += output
            count[i:i+patch_size, j:j+patch_size] += 1

    # Divide by the count to average the overlapping regions
    terrain /= count

    return terrain.tolist()
